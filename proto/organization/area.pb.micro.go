// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/organization/area.proto

package organization

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AreaService service

type AreaService interface {
	AddOne(ctx context.Context, in *ReqAreaAdd, opts ...client.CallOption) (*ReplyAreaInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAreaInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAreaList, error)
	GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyAreaList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBase(ctx context.Context, in *ReqAreaBase, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error)
}

type areaService struct {
	c    client.Client
	name string
}

func NewAreaService(name string, c client.Client) AreaService {
	return &areaService{
		c:    c,
		name: name,
	}
}

func (c *areaService) AddOne(ctx context.Context, in *ReqAreaAdd, opts ...client.CallOption) (*ReplyAreaInfo, error) {
	req := c.c.NewRequest(c.name, "AreaService.AddOne", in)
	out := new(ReplyAreaInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAreaInfo, error) {
	req := c.c.NewRequest(c.name, "AreaService.GetOne", in)
	out := new(ReplyAreaInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AreaService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) Search(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyAreaList, error) {
	req := c.c.NewRequest(c.name, "AreaService.Search", in)
	out := new(ReplyAreaList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) GetListByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyAreaList, error) {
	req := c.c.NewRequest(c.name, "AreaService.GetListByFilter", in)
	out := new(ReplyAreaList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "AreaService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) UpdateBase(ctx context.Context, in *ReqAreaBase, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AreaService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaService) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "AreaService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AreaService service

type AreaServiceHandler interface {
	AddOne(context.Context, *ReqAreaAdd, *ReplyAreaInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyAreaInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	Search(context.Context, *RequestInfo, *ReplyAreaList) error
	GetListByFilter(context.Context, *RequestFilter, *ReplyAreaList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBase(context.Context, *ReqAreaBase, *ReplyInfo) error
	UpdateByFilter(context.Context, *ReqUpdateFilter, *ReplyInfo) error
}

func RegisterAreaServiceHandler(s server.Server, hdlr AreaServiceHandler, opts ...server.HandlerOption) error {
	type areaService interface {
		AddOne(ctx context.Context, in *ReqAreaAdd, out *ReplyAreaInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyAreaInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		Search(ctx context.Context, in *RequestInfo, out *ReplyAreaList) error
		GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyAreaList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBase(ctx context.Context, in *ReqAreaBase, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error
	}
	type AreaService struct {
		areaService
	}
	h := &areaServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AreaService{h}, opts...))
}

type areaServiceHandler struct {
	AreaServiceHandler
}

func (h *areaServiceHandler) AddOne(ctx context.Context, in *ReqAreaAdd, out *ReplyAreaInfo) error {
	return h.AreaServiceHandler.AddOne(ctx, in, out)
}

func (h *areaServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyAreaInfo) error {
	return h.AreaServiceHandler.GetOne(ctx, in, out)
}

func (h *areaServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.AreaServiceHandler.RemoveOne(ctx, in, out)
}

func (h *areaServiceHandler) Search(ctx context.Context, in *RequestInfo, out *ReplyAreaList) error {
	return h.AreaServiceHandler.Search(ctx, in, out)
}

func (h *areaServiceHandler) GetListByFilter(ctx context.Context, in *RequestFilter, out *ReplyAreaList) error {
	return h.AreaServiceHandler.GetListByFilter(ctx, in, out)
}

func (h *areaServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.AreaServiceHandler.GetStatistic(ctx, in, out)
}

func (h *areaServiceHandler) UpdateBase(ctx context.Context, in *ReqAreaBase, out *ReplyInfo) error {
	return h.AreaServiceHandler.UpdateBase(ctx, in, out)
}

func (h *areaServiceHandler) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error {
	return h.AreaServiceHandler.UpdateByFilter(ctx, in, out)
}
