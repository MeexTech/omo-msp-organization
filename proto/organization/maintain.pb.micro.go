// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/organization/maintain.proto

package organization

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MaintainService service

type MaintainService interface {
	AddOne(ctx context.Context, in *ReqMaintainAdd, opts ...client.CallOption) (*ReplyMaintainInfo, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyMaintainInfo, error)
	GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyMaintainList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
}

type maintainService struct {
	c    client.Client
	name string
}

func NewMaintainService(name string, c client.Client) MaintainService {
	return &maintainService{
		c:    c,
		name: name,
	}
}

func (c *maintainService) AddOne(ctx context.Context, in *ReqMaintainAdd, opts ...client.CallOption) (*ReplyMaintainInfo, error) {
	req := c.c.NewRequest(c.name, "MaintainService.AddOne", in)
	out := new(ReplyMaintainInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyMaintainInfo, error) {
	req := c.c.NewRequest(c.name, "MaintainService.GetOne", in)
	out := new(ReplyMaintainInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainService) GetByFilter(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyMaintainList, error) {
	req := c.c.NewRequest(c.name, "MaintainService.GetByFilter", in)
	out := new(ReplyMaintainList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "MaintainService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainService) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "MaintainService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintainService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "MaintainService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MaintainService service

type MaintainServiceHandler interface {
	AddOne(context.Context, *ReqMaintainAdd, *ReplyMaintainInfo) error
	GetOne(context.Context, *RequestInfo, *ReplyMaintainInfo) error
	GetByFilter(context.Context, *RequestFilter, *ReplyMaintainList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateByFilter(context.Context, *ReqUpdateFilter, *ReplyInfo) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
}

func RegisterMaintainServiceHandler(s server.Server, hdlr MaintainServiceHandler, opts ...server.HandlerOption) error {
	type maintainService interface {
		AddOne(ctx context.Context, in *ReqMaintainAdd, out *ReplyMaintainInfo) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyMaintainInfo) error
		GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyMaintainList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
	}
	type MaintainService struct {
		maintainService
	}
	h := &maintainServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MaintainService{h}, opts...))
}

type maintainServiceHandler struct {
	MaintainServiceHandler
}

func (h *maintainServiceHandler) AddOne(ctx context.Context, in *ReqMaintainAdd, out *ReplyMaintainInfo) error {
	return h.MaintainServiceHandler.AddOne(ctx, in, out)
}

func (h *maintainServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyMaintainInfo) error {
	return h.MaintainServiceHandler.GetOne(ctx, in, out)
}

func (h *maintainServiceHandler) GetByFilter(ctx context.Context, in *RequestFilter, out *ReplyMaintainList) error {
	return h.MaintainServiceHandler.GetByFilter(ctx, in, out)
}

func (h *maintainServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.MaintainServiceHandler.GetStatistic(ctx, in, out)
}

func (h *maintainServiceHandler) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error {
	return h.MaintainServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *maintainServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.MaintainServiceHandler.RemoveOne(ctx, in, out)
}
