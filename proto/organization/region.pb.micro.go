// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/organization/region.proto

package organization

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RegionService service

type RegionService interface {
	AddOne(ctx context.Context, in *ReqRegionAdd, opts ...client.CallOption) (*ReplyRegionOne, error)
	GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRegionOne, error)
	RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error)
	GetList(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyRegionList, error)
	GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error)
	UpdateBase(ctx context.Context, in *ReqRegionUpdate, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error)
	UpdateAddress(ctx context.Context, in *RequestAddress, opts ...client.CallOption) (*ReplyRegionOne, error)
	AppendMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyList, error)
	SubtractMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyList, error)
}

type regionService struct {
	c    client.Client
	name string
}

func NewRegionService(name string, c client.Client) RegionService {
	return &regionService{
		c:    c,
		name: name,
	}
}

func (c *regionService) AddOne(ctx context.Context, in *ReqRegionAdd, opts ...client.CallOption) (*ReplyRegionOne, error) {
	req := c.c.NewRequest(c.name, "RegionService.AddOne", in)
	out := new(ReplyRegionOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) GetOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyRegionOne, error) {
	req := c.c.NewRequest(c.name, "RegionService.GetOne", in)
	out := new(ReplyRegionOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) RemoveOne(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "RegionService.RemoveOne", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) GetList(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyRegionList, error) {
	req := c.c.NewRequest(c.name, "RegionService.GetList", in)
	out := new(ReplyRegionList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) GetStatistic(ctx context.Context, in *RequestFilter, opts ...client.CallOption) (*ReplyStatistic, error) {
	req := c.c.NewRequest(c.name, "RegionService.GetStatistic", in)
	out := new(ReplyStatistic)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) UpdateBase(ctx context.Context, in *ReqRegionUpdate, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "RegionService.UpdateBase", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, opts ...client.CallOption) (*ReplyInfo, error) {
	req := c.c.NewRequest(c.name, "RegionService.UpdateByFilter", in)
	out := new(ReplyInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) UpdateAddress(ctx context.Context, in *RequestAddress, opts ...client.CallOption) (*ReplyRegionOne, error) {
	req := c.c.NewRequest(c.name, "RegionService.UpdateAddress", in)
	out := new(ReplyRegionOne)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) AppendMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "RegionService.AppendMember", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionService) SubtractMember(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ReplyList, error) {
	req := c.c.NewRequest(c.name, "RegionService.SubtractMember", in)
	out := new(ReplyList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RegionService service

type RegionServiceHandler interface {
	AddOne(context.Context, *ReqRegionAdd, *ReplyRegionOne) error
	GetOne(context.Context, *RequestInfo, *ReplyRegionOne) error
	RemoveOne(context.Context, *RequestInfo, *ReplyInfo) error
	GetList(context.Context, *RequestFilter, *ReplyRegionList) error
	GetStatistic(context.Context, *RequestFilter, *ReplyStatistic) error
	UpdateBase(context.Context, *ReqRegionUpdate, *ReplyInfo) error
	UpdateByFilter(context.Context, *ReqUpdateFilter, *ReplyInfo) error
	UpdateAddress(context.Context, *RequestAddress, *ReplyRegionOne) error
	AppendMember(context.Context, *RequestInfo, *ReplyList) error
	SubtractMember(context.Context, *RequestInfo, *ReplyList) error
}

func RegisterRegionServiceHandler(s server.Server, hdlr RegionServiceHandler, opts ...server.HandlerOption) error {
	type regionService interface {
		AddOne(ctx context.Context, in *ReqRegionAdd, out *ReplyRegionOne) error
		GetOne(ctx context.Context, in *RequestInfo, out *ReplyRegionOne) error
		RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error
		GetList(ctx context.Context, in *RequestFilter, out *ReplyRegionList) error
		GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error
		UpdateBase(ctx context.Context, in *ReqRegionUpdate, out *ReplyInfo) error
		UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error
		UpdateAddress(ctx context.Context, in *RequestAddress, out *ReplyRegionOne) error
		AppendMember(ctx context.Context, in *RequestInfo, out *ReplyList) error
		SubtractMember(ctx context.Context, in *RequestInfo, out *ReplyList) error
	}
	type RegionService struct {
		regionService
	}
	h := &regionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RegionService{h}, opts...))
}

type regionServiceHandler struct {
	RegionServiceHandler
}

func (h *regionServiceHandler) AddOne(ctx context.Context, in *ReqRegionAdd, out *ReplyRegionOne) error {
	return h.RegionServiceHandler.AddOne(ctx, in, out)
}

func (h *regionServiceHandler) GetOne(ctx context.Context, in *RequestInfo, out *ReplyRegionOne) error {
	return h.RegionServiceHandler.GetOne(ctx, in, out)
}

func (h *regionServiceHandler) RemoveOne(ctx context.Context, in *RequestInfo, out *ReplyInfo) error {
	return h.RegionServiceHandler.RemoveOne(ctx, in, out)
}

func (h *regionServiceHandler) GetList(ctx context.Context, in *RequestFilter, out *ReplyRegionList) error {
	return h.RegionServiceHandler.GetList(ctx, in, out)
}

func (h *regionServiceHandler) GetStatistic(ctx context.Context, in *RequestFilter, out *ReplyStatistic) error {
	return h.RegionServiceHandler.GetStatistic(ctx, in, out)
}

func (h *regionServiceHandler) UpdateBase(ctx context.Context, in *ReqRegionUpdate, out *ReplyInfo) error {
	return h.RegionServiceHandler.UpdateBase(ctx, in, out)
}

func (h *regionServiceHandler) UpdateByFilter(ctx context.Context, in *ReqUpdateFilter, out *ReplyInfo) error {
	return h.RegionServiceHandler.UpdateByFilter(ctx, in, out)
}

func (h *regionServiceHandler) UpdateAddress(ctx context.Context, in *RequestAddress, out *ReplyRegionOne) error {
	return h.RegionServiceHandler.UpdateAddress(ctx, in, out)
}

func (h *regionServiceHandler) AppendMember(ctx context.Context, in *RequestInfo, out *ReplyList) error {
	return h.RegionServiceHandler.AppendMember(ctx, in, out)
}

func (h *regionServiceHandler) SubtractMember(ctx context.Context, in *RequestInfo, out *ReplyList) error {
	return h.RegionServiceHandler.SubtractMember(ctx, in, out)
}
